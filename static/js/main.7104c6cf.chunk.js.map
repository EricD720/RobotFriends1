{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","cardArray","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","toLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAceA,EAZF,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAAOC,EAAO,EAAPA,GACxB,OACQ,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA2BF,EAA3B,YAAyCG,IAAI,WACrD,6BACI,4BAAKL,GACL,2BAAIC,MCaTK,EAlBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACTC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GAChC,OACA,kBAAC,EAAD,CACIC,IAAMD,EACNT,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,WAIzB,OACA,6BACKO,ICDMK,EAbG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aAChB,OACI,yBAAKX,UAAW,OACZ,2BACIA,UAAW,mCACXY,KAAK,YACLC,YAAY,gBACZC,SAAUH,MCCXI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEJ,EAAMK,WC6CJC,G,wDAzCX,aAAc,IAAD,8BACT,gBAeJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SAfxC,EAAKC,MAAQ,CACTzB,OAAQ,GACRsB,YAAa,IAJR,E,qDASjB,WAAoB,IAAD,OACfI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACrB,OAAO8B,S,oBASzC,WACI,MAA+BC,KAAKN,MAA5BzB,EAAR,EAAQA,OAAQsB,EAAhB,EAAgBA,YACVU,EAAiBhC,EAAOiC,QAAO,SAAAjC,GACjC,OAAOA,EAAOP,KAAKyC,cAAcC,SAASb,EAAYY,kBAE1D,OAAQlC,EAAOoC,OAGC,yBAAKxC,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcwB,KAAKZ,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUnB,OAASgC,MAN3C,8C,GA5BUK,cCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OAEP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.7104c6cf.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) =>{\r\n    return(\r\n            <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n                <img src ={`https://robohash.org/${id}?200x200`} alt='robots' />\r\n                <div>\r\n                    <h2>{name}</h2>\r\n                    <p>{email}</p>\r\n                </div>\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) =>{\r\n    const cardArray = robots.map((user, i) => {\r\n        return (\r\n        <Card \r\n            key= {i} \r\n            id={robots[i].id} \r\n            name={robots[i].name} \r\n            email={robots[i].email}\r\n            />\r\n        );\r\n    })\r\n    return(\r\n    <div>\r\n        {cardArray}\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from \"react\";\r\n\r\nconst SearchBox = ({searchChange}) =>{\r\n    return(\r\n        <div className= 'pa2'>\r\n            <input \r\n                className ='pa3 ba b--green bg-lightest-blue'\r\n                type='searchbox' \r\n                placeholder='Search Robots'\r\n                onChange={searchChange}\r\n                />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from \"react\";\r\n\r\nconst Scroll = (props) =>{\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll","import React, { Component} from \"react\";\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\n\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n\r\ncomponentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=> response.json())\r\n        .then(users => this.setState({robots:users}))\r\n   \r\n}\r\n\r\n    onSearchChange = (event) =>{\r\n        this.setState({searchfield:event.target.value})\r\n    }\r\n\r\n\r\n    render() {\r\n        const { robots, searchfield} = this.state;\r\n        const filteredRobots = robots.filter(robots =>{\r\n            return robots.name.toLowerCase().includes(searchfield.toLowerCase())\r\n        })\r\n        return !robots.length ?\r\n        <h1>Loading...</h1> :\r\n        (\r\n                        <div className='tc'>\r\n                            <h1 className='f1'>RoboFriends</h1>\r\n                            <SearchBox searchChange={this.onSearchChange} />\r\n                            <Scroll>\r\n                                <CardList robots={ filteredRobots }/>\r\n                            </Scroll>\r\n                        </div>\r\n                    );\r\n            }\r\n    }\r\n\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\nReactDOM.render(\n \n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}